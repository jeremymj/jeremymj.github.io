<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>eth开发</title>
      <link href="/archives/8a63a1af.html"/>
      <url>/archives/8a63a1af.html</url>
      
        <content type="html"><![CDATA[<p>使用parity 版本来搭建开发测试节点；<br> <a id="more"></a></p><h2 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h2><p>使用parity客户端，启动命令:<br>–jsonrpc-apis=<br>可选项: all, safe, debug,<br>        web3, net, eth, pubsub, personal, signer, parity, parity_pubsub,<br>        parity_accounts, parity_set, traces, rpc, secretstore, shh, shh_pubsub.</p><p>–jsonrpc-experimental</p><p>–chain=[CHAIN]</p><p>classic, poacore, tobalaba, expanse,<br>        musicoin, ellaism, mix, callisto, morden, ropsten, kovan, rinkeby,<br>        goerli, kotti, poasokol, testnet, or dev</p><p>–bootnodes<br>enode://a5fe4a83c7ef89a68918ae2fe1ecec0f4fc2d3582c0fafe2c6d5695f2d2511f66651bf756fbae90f6ca82dd7efeb525d80f48b5be305d1cd4149100300f51623@192.168.1.6:30303</p><p> –db-path</p><p> –base-path=[PATH]</p><p>/home/jeremy/work/eth-db</p><p>parity –geth –chain ropsten –author 0xda9b1a939350dc7198165ff84c43ce77a723ef73</p><p>若需要挖矿，则需要先生成账户，运行<code>parity account new</code>，得到地址 0x3cdc082d3b6b5e0588501552d35ed3bb5feccc70；<br>允许节点挖矿：<code>parity --author 0037a6b811ffeb6e072da21179d11b1406371c63</code></p><p>生成地址:0x7b02dca46711be2664310f4fe322c8bd35a9bd2a</p><p>测试链:<br>parity –config dev</p><p>address:0x00a329c0648769a73afac7f9381e08fb43dbea72</p><p>pri_key:0x4d5db4107d237df6a3d58ee5f70ae63d73d7658d4026f2eefd2f204c81682cb7</p><p>{“method”:”eth_getTransactionCount”,”params”:[“0x00a329c0648769a73afac7f9381e08fb43dbea72”],”id”:1,”jsonrpc”:”2.0”}</p><p>{“method”:”eth_getBalance”,”params”:[“0x00a329c0648769a73afac7f9381e08fb43dbea72”],”id”:1,”jsonrpc”:”2.0”}</p><p>{“method”:”eth_call”,”params”:[{“from”:”0x00a329c0648769a73afac7f9381e08fb43dbea72”,”to”:”0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b”,”value”:”0x186a0”}],”id”:1,”jsonrpc”:”2.0”}</p><p>{“method”:”eth_chainId”,”params”:[],”id”:1,”jsonrpc”:”2.0”}</p><p>{“method”:”eth_blockNumber”,”params”:[],”id”:1,”jsonrpc”:”2.0”}</p><p>{“method”:”eth_accounts”,”params”:[],”id”:1,”jsonrpc”:”2.0”}</p><h2 id="交易生成"><a href="#交易生成" class="headerlink" title="交易生成"></a>交易生成</h2><p>1、地址生成；<br>2、密钥管理；<br>3、交易生成<br>     生成交易<br>     transfer（from,to）</p><h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>{“method”:”eth_sendTransaction”,”params”:[{“from”:”0x00a329c0648769a73afac7f9381e08fb43dbea72”,”to”:”0x7b02dca46711be2664310f4fe322c8bd35a9bd2a”,”gas”:”0x76c0”,”gasPrice”:”0x9184e72a000”,”value”:”0x9184e72a”,”data”:”0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675”}],”id”:1,”jsonrpc”:”2.0”}</p><h2 id="交易验证"><a href="#交易验证" class="headerlink" title="交易验证"></a>交易验证</h2><p><a href="https://download.mycrypto.com/" target="_blank" rel="noopener">https://download.mycrypto.com/</a></p><p>82c445eb270de865e83576a9f80964a60593295845a08e94d88eb61a994eb155</p><h2 id="RPC-调用"><a href="#RPC-调用" class="headerlink" title="RPC 调用"></a>RPC 调用</h2><p>{“method”:”eth_call”,”params”:[{“from”:”0x407d73d8a49eeb85d32cf465507dd71d507100c1”,”to”:”0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b”,”value”:”0x186a0”}],”id”:1,”jsonrpc”:”2.0”}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Substrate 问题记录</title>
      <link href="/archives/dd1b667b.html"/>
      <url>/archives/dd1b667b.html</url>
      
        <content type="html"><![CDATA[<h2 id="节点运行"><a href="#节点运行" class="headerlink" title="节点运行"></a>节点运行</h2><p>要是以前有通过命令行运行substrate,建议先执行一次 <code>substrate pruge-chain</code><br>以开发模式运行 <code>substrate --dev</code> <a id="more"></a><br>若节点在指定的时间内不能生成块 可以使用参数 <code>--execution-block-construction Native</code> <br><br>若节点需要对外提供访问服务：可以在启动参数添加 <code>--ws-external --rpc-external</code> <br><br>因此一个完整的启动命令可以是：<br><code>substrate --dev --execution-block-construction Native --ws-external --rpc-external</code></p><h2 id="日志过滤"><a href="#日志过滤" class="headerlink" title="日志过滤"></a>日志过滤</h2><p>当节点运行起来后，若需要查看日志 可以使用参数 <code>--log debug</code>会输入大量的debug 日志,只是大量这种日志 会影响观察 可以使用设置命令行参数<br><code>RUST_LOG=&quot;runtime=debug,substrate=error&quot;</code>，这种方式启动起来后日志就会大量的减少,同时会把所有的错误日志显示出来</p><p>#[cfg(feature=”std”)]<br>println!(“fee is:{:?}”,fee);</p><p>启动命令：<code>RUST_LOG=&quot;runtime=debug,substrate=error&quot; ./substrate --dev --execution-block-construction Native --ws-external --rpc-external</code></p><h2 id="模块编写教程"><a href="#模块编写教程" class="headerlink" title="模块编写教程"></a>模块编写教程</h2><p>自定义Module，编写自己基于链上的应用，（如加密猫），使用脚本命令 curl <a href="https://getsubstrate.io" target="_blank" rel="noopener">https://getsubstrate.io</a> -sSf 安装环境；</p><p>数据还原 ./target/release/substratekitties purge-chain –dev<br>运行   ./target/release/substratekitties –dev</p><p>在使用polkadot-js/api</p><p>调用keyring相关函数，遇到ExtError: @polkadot/wasm-crypto has not been initialized 这种问题</p><p>是因为keyring 依赖于sr25519,它只能通过WASM调用，并且是异步方式初始化；所有解决方式：</p><ul><li>要是单机使用，可以在调用new 之前，明确的初始化加密模块；</li><li>在api中并行调用，在构造keyring之前，先调用Api.call，因为API初始化是异步的，因此也要初始化crypto init</li></ul><h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><p>可以编译里面的node 节点或者node-template, 编译的时候 需要使用nightly版本的toolchain (20190903),可以在项目的根目录下通过配置文件指定 rust-toolchain；<br>echo “nignely” &gt; rust-toolchain</p><h2 id="智能合约的编写"><a href="#智能合约的编写" class="headerlink" title="智能合约的编写"></a>智能合约的编写</h2><h3 id="编写工具"><a href="#编写工具" class="headerlink" title="编写工具"></a>编写工具</h3><ul><li>基础工具安装<br>sudo apt install -y curl jq tar<br>WABT: The WebAssembly Binary Toolkit:提供WebAssembly 二进制工具集，包含的工具如下：</li><li><strong>wat2wasm</strong>: translate from WebAssembly text format to the WebAssembly binary format</li><li><strong>wasm2wat</strong>: the inverse of wat2wasm, translate from the binary format back to the text format (also known as a .wat)</li><li><strong>wasm-objdump</strong>: print information about a wasm binary. Similiar to objdump.</li><li><strong>wasm-interp</strong>: decode and run a WebAssembly binary file using a stack-based interpreter</li><li><strong>wat-desugar</strong>: parse .wat text form as supported by the spec interpreter (s-expressions, flat syntax, or mixed) and print “canonical” flat format</li><li><strong>wasm2c</strong>: convert a WebAssembly binary file to a C source and header</li><li><strong>wasm-strip</strong>: remove sections of a WebAssembly binary file</li><li><strong>wasm-validate</strong>: validate a file in the WebAssembly binary format</li><li><strong>wast2json</strong>: convert a file in the wasm spec test format to a JSON file and associated wasm binary files</li><li><strong>wasm-opcodecnt</strong>: count opcode usage for instructions</li><li><strong>spectest-interp</strong>: read a Spectest JSON file, and run its tests in the interpreter</li></ul><p>使用脚本安装：<code>curl https://raw.githubusercontent.com/paritytech/scripts/master/install-wasm-binaries.sh -sSf |bash -s</code>,</p><p><code>cargo install pwasm-utils-cli --bin wasm-prune --force</code></p><ul><li><p>在安装基础的编译环境后，可以编译智能合约编写工具 使用命令</p><p>cargo install –force –git <a href="https://github.com/paritytech/ink" target="_blank" rel="noopener">https://github.com/paritytech/ink</a> cargo-contract，在安装成功后，可以使用命令：cargo contract new 合约名<br>创建合约的提示性代码</p></li></ul><h2 id="编译ABI文件"><a href="#编译ABI文件" class="headerlink" title="编译ABI文件"></a>编译ABI文件</h2><p>  创建合约ABI json文件 <code>cargo contract generate-metadata</code></p><p>  当使用substrate 版本v1.0.0时 ink 使用版本efe69028cc5bd9ec86bfc15f52162b39c560c194 可以正常的使用</p><h2 id="创建智能合约"><a href="#创建智能合约" class="headerlink" title="创建智能合约"></a>创建智能合约</h2><h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h3><p>在合约中使用可以存储一些简单的值，使用storage::Value&lt;T&gt;,其中T包含简单的基本类型，比如bool,, u{8,16,32,64,128}、i{8,16,32,64,128}, AccountId, Balance 以及他们的 tuples and arrays类型。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyContract</span></span> &#123;</span><br><span class="line">       <span class="comment">// Store some AccountId</span></span><br><span class="line">       my_address: storage::Value&lt;AccountId&gt;,</span><br><span class="line">       <span class="comment">// Store some Balance</span></span><br><span class="line">       my_balance: storage::Value&lt;Balance&gt;,</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>也可以使用复杂点值类型，比如String或者map形式，在使用的时候 需要指定引入的特定路径；</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">use</span> ink_core::env::&#123;AccountId, Balance&#125;;</span><br><span class="line"><span class="comment">// Note that you will need to import the `String` type to use it</span></span><br><span class="line"><span class="keyword">use</span> ink_core::memory::string::<span class="built_in">String</span>;</span><br><span class="line"></span><br><span class="line">contract! &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MyContract</span></span> &#123;</span><br><span class="line">        <span class="comment">// Store a string</span></span><br><span class="line">        my_string: storage::Value&lt;<span class="built_in">String</span>&gt;,</span><br><span class="line">        <span class="comment">// Store a key/value map; AccountId -&gt; Balance</span></span><br><span class="line">        my_map: storage::HashMap&lt;AccountId, Balance&gt;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合约的发布"><a href="#合约的发布" class="headerlink" title="合约的发布"></a>合约的发布</h3><p>编写的合约必须要 impl Deploy  trait,实现包含在里面的方法，deploy 这个方法在合约发布的时候只执行一次，在执行的时候，可以传递参数，但是传递的参数类型有严格的限制，当前只支持用户传递基本的数据类型比如：bool, u{8,16,32,64,128}, i{8,16,32,64,128} 和  SRML primitives  中定义的，比如AccountId、 Balance这种类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract! &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MyContract</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> Deploy <span class="keyword">for</span> MyContract &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">deploy</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, a: <span class="built_in">bool</span>, b: <span class="built_in">i32</span>) &#123;</span><br><span class="line">            <span class="comment">// Deployment logic that runs once upon contract creation using `a` and `b`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在合约存储里面使用到的 Value，为了能够正确的访问，需要在deploy中进行初始化。假如没有初始化在和约中定义的 storage::Value 属性，在使用他们的时候，会造成合约panic！</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract! &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MyContract</span></span> &#123;</span><br><span class="line">        <span class="comment">// Store a bool</span></span><br><span class="line">        my_bool: storage::Value&lt;<span class="built_in">bool</span>&gt;,</span><br><span class="line">        <span class="comment">// Store a key/value map</span></span><br><span class="line">        my_map: storage::HashMap&lt;AccountId, Balance&gt;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> Deploy <span class="keyword">for</span> MyContract &#123;</span><br><span class="line">        <span class="comment">/// Initializes our state to `false` upon deploying our smart contract.</span></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">deploy</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.my_bool.set(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p>将Public 和Private 方法功能单独写，Public 方法写pub(external)</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> MyContract &#123;</span><br><span class="line">    <span class="comment">// Public functions go here</span></span><br><span class="line">    <span class="keyword">pub</span>(external) <span class="function"><span class="keyword">fn</span> <span class="title">my_public_function</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> MyContract &#123;</span><br><span class="line">    <span class="comment">// Private functions go here</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">my_private_function</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合约测试"><a href="#合约测试" class="headerlink" title="合约测试"></a>合约测试</h3><p>cargo +nightly test</p><h3 id="合约发布"><a href="#合约发布" class="headerlink" title="合约发布"></a>合约发布</h3><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li>substarate master分支的代码 需要使用nightly版本编译链版本来进行编译；</li><li>在使用substrate –dev方式启动的时候，出现 DB corrupted: Invalid argument: You have to open all column的问题，需要先删除指定内容：rm -rf ~/.local/share/substrate/</li></ul><h2 id="节点启动"><a href="#节点启动" class="headerlink" title="节点启动"></a>节点启动</h2><h3 id="启动私链"><a href="#启动私链" class="headerlink" title="启动私链"></a>启动私链</h3><ul><li>创建启动参数模板 <code>./target/release/node-template build-spec --chain=local &gt; customSpec.json</code></li><li>修改<code>customSpec.json</code>中 aura、grandpa中包含的地址，其中aura 中的地址用于区块的生成，grandpa中的地址用于最终块的确认；</li><li>使用命令 <code>./target/release/node-template build-spec --chain customSpec.json --raw &gt; customSpecRaw.json</code>生成启动需要的创世文件</li><li>在所有的节点中，要作为验证者，都需要使用相同的customSpecRaw.json文件来启动</li><li>最先启动的节点使用命令：<code>./node-template --chain ./customSpecRaw.json --base-path /tmp/node1 --port 30333 --ws-port 9944 --rpc-port 9933 --validator --name node1</code></li><li>后续启动的节点，需要增加根节点的地址<code>./node-template --chain ./customSpecRaw.json --base-path /tmp/node2 --port 30334 --ws-port 9945 --rpc-port 9934 --validator --name node2 --bootnodes /ip4/192.168.1.6/tcp/30333/p2p/QmVPKXseHEdaDBBLonLyJfWwUEQwV9XNAuEZNFxtJu4dnS</code></li><li>在启动成功后，需要通过rpc方式将在 <code>customSpec.json</code>指定地址对应的助记词，aura、grandpa算法需要的公钥传入到对应的节点中；</li><li>将key传入节点后，需要重新启动节点，这样节点就可以正常的生成块、确认块了；</li><li>若在启动的时候，没有添加 –validator 这个参数，则该节点就只能同步数据，不能参与区块的生成与最终块确认；</li></ul><p>启动之前，需要先生成密钥对SR25519 用于块生成，ED25519 用于最终确认区块：<br>密钥对1：</p><p>Sr25519: aura</p><ul><li>助记词：<code>clip organ olive upper oak void inject side suit toilet stick narrow</code></li><li>Secret seed: 0x4bd2b2c1dad3dbe3fa37dc6ad5a4e32ddd8ad84b938179ac905b0622880e86e7</li><li>Public key (hex): 0x9effc1668ca381c242885516ec9fa2b19c67b6684c02a8a3237b6862e5c8cd7e</li><li>Account ID: 0x9effc1668ca381c242885516ec9fa2b19c67b6684c02a8a3237b6862e5c8cd7e</li><li>SS58 Address: 5FfBQ3kwXrbdyoqLPvcXRp7ikWydXawpNs2Ceu3WwFdhZ8W4</li></ul><p>Ed25519: gran</p><ul><li>Secret phrase <code>clip organ olive upper oak void inject side suit toilet stick narrow</code> is account:</li><li>Secret seed: 0x4bd2b2c1dad3dbe3fa37dc6ad5a4e32ddd8ad84b938179ac905b0622880e86e7</li><li>Public key (hex): 0xb48004c6e1625282313b07d1c9950935e86894a2e4f21fb1ffee9854d180c781</li><li>Account ID: 0xb48004c6e1625282313b07d1c9950935e86894a2e4f21fb1ffee9854d180c781 </li><li>SS58 Address: 5G9NWJ5P9uk7am24yCKeLZJqXWW6hjuMyRJDmw4ofqxG8Js2</li></ul><p>密钥对2：</p><p>SR25519</p><ul><li>Secret phrase <code>paper next author index wedding frost voice mention fetch waste march tilt</code> is account:</li><li>Secret seed: 0x4846fedafeed0cf307da3e2b5dfa61415009b239119242006fc8c0972dde64b0</li><li>Public key (hex): 0x74cca68a32156615a5923c67024db70da5e7ed36e70c8cd5bcf3556df152bb6d</li><li>Account ID: 0x74cca68a32156615a5923c67024db70da5e7ed36e70c8cd5bcf3556df152bb6d</li><li>SS58 Address: 5EhrCtDaQRYjVbLi7BafbGpFqcMhjZJdu8eW8gy6VRXh6HDp</li></ul><p>ED25519</p><ul><li>Secret phrase <code>paper next author index wedding frost voice mention fetch waste march tilt</code> is account:</li><li>Secret seed: 0x4846fedafeed0cf307da3e2b5dfa61415009b239119242006fc8c0972dde64b0</li><li>Public key (hex): 0x0fe9065f6450c5501df3efa6b13958949cb4b81a2147d68c14ad25366be1ccb4</li><li>Account ID: 0x0fe9065f6450c5501df3efa6b13958949cb4b81a2147d68c14ad25366be1ccb4</li><li>SS58 Address: 5CRZoFgJs4zLzCCAGoCUUs2MRmuD5BKAh17pWtb62LMoCi9h</li></ul><p>密钥对3:<br>sr25519::</p><ul><li>Secret phrase <code>crack amused shed reduce consider phone stage sniff drama clinic unveil retire</code></li><li>Public key:0x0668354f654d4d7954a90b3819f32ed05eaed8394cc3ae4c75c803e92f527168</li><li>Account ID:0x0668354f654d4d7954a90b3819f32ed05eaed8394cc3ae4c75c803e92f527168</li><li>SS58 Address: 5CD76oHb5PQRxvga6kWVvZxRD35gkUq1k2q87DPVc73L9abK</li></ul><p>ed25519</p><ul><li>Secret phrase <code>crack amused shed reduce consider phone stage sniff drama clinic unveil retire</code></li><li>Public key:0x0ec5a5a5affcadc155ce1c092e112041a64916293397a9c502a8a50744fa1ea7</li><li>Account ID:0x0ec5a5a5affcadc155ce1c092e112041a64916293397a9c502a8a50744fa1ea7</li><li>SS58 Address: 5CQ5Evw5ZcYKLpcf4DWwEazR9qR6Hrk3MNCUc6Lyi6imyzJy</li></ul><p>密钥对4:<br>sr25519::</p><ul><li>Secret phrase <code>hollow pigeon project utility island laundry spell six recipe soccer swing gold</code></li><li>Public key:0x9831764843144e14ee80acfee2ef8ab3ad28904af20078139bd5ac1b5f17bf0c</li><li>Account ID:0x9831764843144e14ee80acfee2ef8ab3ad28904af20078139bd5ac1b5f17bf0c</li><li>SS58 Address: 5FWFq2mwnYN11dYQ5uRF6oGm8i4WDY8x65w4DZTTuPwJWLTb</li></ul><p>ed25519</p><ul><li>Secret phrase <code>hollow pigeon project utility island laundry spell six recipe soccer swing gold</code></li><li>Public key:0x74335f953d21b6de5c5b4602d03b6905c55394cd77a3dac43dc2e394283ca396</li><li>Account ID:0x74335f953d21b6de5c5b4602d03b6905c55394cd77a3dac43dc2e394283ca396</li><li>SS58 Address: 5Eh4fymh2VWTkhevSy28giV2Vnv3Lbz2Lnq8tJciud7usKVx</li></ul><h4 id="启动默认私链"><a href="#启动默认私链" class="headerlink" title="启动默认私链"></a>启动默认私链</h4><ul><li><p>./substrate –base-path /tmp/alice –chain=local –alice –port 30333 –ws-port 9944 –rpc-port 9933 –telemetry-url ws://telemetry.polkadot.io:1024</p></li><li><p>./substrate –base-path /tmp/bob –chain=local –bob –port 30332 –execution-block-construction Native –ws-external –rpc-external –validator –pool-limit 10000 –bootnodes /ip4/127.0.0.1/tcp/30333/p2p/QmNNfEjLjyZZ8kT8CEDFqCUs9XKWBCysVHRPqjxM16Pz6A</p></li></ul><h4 id="启动自定义私链"><a href="#启动自定义私链" class="headerlink" title="启动自定义私链"></a>启动自定义私链</h4><p>种子节点:</p><ul><li>./substrate –base-path /home/jeremy/work/chain-data/node1 –chain ./customSpecRaw_node.json –port 30333 –ws-port 9944 –rpc-port 9933 –validator –name node1  –pool-limit 10000</li></ul><p>验证节点:</p><ul><li>./substrate –base-path /home/jeremy/work/chain-data/node2 –chain ./customSpecRaw_node.json –port 30334 –ws-port 9945 –rpc-port 9934  –validator  –pool-limit 10000  –bootnodes /ip4/127.0.0.1/tcp/30333/p2p/QmQMqUY9T1Szfj1zk4VLEE7zAR72tpt2EvdZSFPXEwprBU</li></ul><p>需要注意保存数据的位置：默认情况下<code>/tmp</code>路径下的数据在重启之后，数据就消失了</p><p><strong>这两种启动方式的区别：最主要区别为使用的密钥不一样</strong></p><h2 id="polkadot-js-api"><a href="#polkadot-js-api" class="headerlink" title="polkadot-js/api"></a>polkadot-js/api</h2><p>调用keyring相关函数，遇到ExtError: @polkadot/wasm-crypto has not been initialized 这种问题</p><p>是因为keyring 依赖于sr25519,它只能通过WASM调用，并且是异步方式初始化；所有解决方式：</p><ul><li>要是单机使用，可以在调用new 之前，明确的初始化加密模块；</li><li>在api中并行调用，在构造keyring之前，先调用Api.call，因为API初始化是异步的，因此也要初始化crypto init </li></ul><h3 id="使用js-查看链相关的参数"><a href="#使用js-查看链相关的参数" class="headerlink" title="使用js 查看链相关的参数"></a>使用js 查看链相关的参数</h3><p>当api链接到一个节点，第一件事情是获取节点的<code>metadata</code>,元数据提供了当前节点哪些方法可以使用。api 的调用格式为: <code>api.&lt;type&gt;.&lt;module&gt;.&lt;section&gt;</code></p><p>api提供了几个快捷使用的默认参数:</p><ul><li><code>api.genesisHash</code> - The genesisHash of the connected chain</li><li><code>api.runtimeMetadata</code> - The metadata as retrieved from the chain</li><li><code>api.runtimeVersion</code> - The chain runtime version (including spec/impl. versions and types)</li><li><code>api.libraryInfo</code> - The version of the API, i.e. @polkadot/api v0.90.1</li></ul><p>在使用js keyring 来导入备份的密码时，若要签名，需要先将pair解密；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> account_obj = <span class="built_in">JSON</span>.parse(account_str);<span class="comment">//将备份的json字符串转换成json对象</span></span><br><span class="line"><span class="keyword">const</span> keyring = <span class="keyword">new</span> Keyring(&#123; <span class="attr">type</span>: <span class="string">'sr25519'</span> &#125;);<span class="comment">//初始化keyring</span></span><br><span class="line"><span class="keyword">const</span> from_account = keyring.addFromJson(account_obj);<span class="comment">//得到account实例</span></span><br><span class="line">  from_account.decodePkcs8(<span class="string">"123456"</span>);<span class="comment">//使用密码进行解密，用于签名 可以通过 islock()方法来判断是否需要解密，这样就可以在后续的签名中直接使用该账户了，为确保安全在签名完成后需要将该账户继续锁住，使用 lock()方法</span></span><br></pre></td></tr></table></figure><p>在substrate 中，关于交易的检查相关操作 是通过trait的方式来定义的，具体内容可以查看位置<br><code>primitives/sr-primitives/src/traits.rs</code></p><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>通过终端方式 使用websocket 提交jsonrpc，使用方式为：<code>wscat -c ws://127.0.0.1:9944</code>，若是没有安装<code>wscat</code>,可以使用命令：<code>sudo apt install node-ws</code>，若在启动的时候，提示<code>Error: Cannot find module &#39;ws&#39;</code>模块没有找到的错误，可以试试使用管理员的方式来运行<code>sudo</code></p><p>{“id”:44,”jsonrpc”:”2.0”,”method”:”state_subscribeStorage”,”params”:[[“0xe70a9997c8a0d1ae4b47094ca78234e0da641adc9838487b4fe5b60ab577daf3”]]}</p><h2 id="模块调试"><a href="#模块调试" class="headerlink" title="模块调试"></a>模块调试</h2><p>在模块开发中，若需要新增加自定义的结构体，同时该结构体具有debug功能，定义如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> sp_runtime::RuntimeDebug;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg_attr(feature = <span class="meta-string">"std"</span>, derive(Serialize, Deserialize, Debug))]</span></span><br><span class="line"><span class="meta">#[derive(Encode, Decode, Clone, PartialEq, Eq, RuntimeDebug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Offer</span></span>&lt;Balance,AccountId&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> order: Order&lt;Balance,AccountId&gt;,</span><br><span class="line">    <span class="keyword">pub</span> sender: AccountId,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在substrate中使用一些标准库的代码，可以使用如下方式:<code>sp_std::prelude::*</code></p><p>同时在Cargo.toml文件 <code>[feature]</code> 部分添加一行 <code>sp-std/std</code>，</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">rstd</span> = &#123; package = <span class="string">"sp-std"</span>, git = <span class="string">"https://github.com/blockxlabs/substrate"</span>, branch = <span class="string">"master"</span>, default-features = <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="section">[features]</span></span><br><span class="line"><span class="attr">default</span> = [<span class="string">"std"</span>]</span><br><span class="line"><span class="attr">std</span> = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"rstd/std"</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The portion of the file we’re interested in is the Aura authorities (used for creating blocks) and the GRANDPA authorities (used for finalizing blocks). That section looks like this</p><p>怎么来运行一个自己的公链，运行这样的一个链 需要的配置文件参数怎么来设置？<br>是否需要一个界面来查看当前节点的出块情况？<br>跟节点的nodeid 是怎么算出来的？</p><p>RPC调用 存在最大连接数限制<br>发布的时候 需要生成节点使用的密钥，但是针对现存在的代码，node-template的代码版本GenesisConfig 没有更新；</p><p>需要知道自己怎么来修改node中的验证节点</p><p>节点的token机制怎么来设计？（这一部分暂时不对外公开）</p><p>针对节点，对外暴露的方式为 用户通过证书号来进行查询；</p><p>node_template node中GenesisConfig 结构体相应的元素不一样？</p><p>以私链方式运行，出块时间变为60s 但是以开发模式运行节点，出块时间为6s</p><p>前4个块速度很慢，以私链方式启动，产生块的时间是设置的2倍时间；</p><p>设置期望出块时间为3s,实际在运行的过程中，当数据量大的情况下，实际出块时间最差发现有8s的；为确保交易最终被确认，需要的时间为实际出块的3倍；</p><p>查看一个区块里面的交易个数？是否能够扩大交易个数；</p><p>node 验证节点能否动态的增加？</p><p>怎么还原？？</p><p>运行时 能否使用 同步节点 不参与验证 只是数据同步？</p><p>区块数据的导出与导入；</p><p>部署节点，需要部署的节点有同步数据节点，验证节点；在验证节点，尽量不要使用<code>--rpc-external</code> and <code>--ws-external</code>方式</p><p>在节点在运行的期间，需要对节点状况进行监控？这个监控使用哪种方式呢 监控对象为: 磁盘空间</p><p>查看功能模块介绍：palletStaking、palletBabe、palletIndices、palletBalances、palletSession、palletDemocracy、palletTreasury、palletGrandpa</p><h3 id="密钥类型"><a href="#密钥类型" class="headerlink" title="密钥类型"></a>密钥类型</h3><p>在初始化的时候，initial_authorities包括的地址如下: Vec&lt;(AccountId, AccountId, GrandpaId, BabeId, ImOnlineId, AuthorityDiscoveryId)&gt;,是用过<strong>get_authority_keys_from_seed</strong>这个函数得到的，通过seed，会生成几种类型的id：</p><p>AccountId：  包含<code>get_account_id_from_seed</code>是使用sr25519算法得到的，</p><p>GrandpaId 使用算法ed25519</p><p>BabeId 是AuthorityId，通过<code>pub type AuthorityId = app::Public;</code> app_crypto!(sr25519, BABE);<br>ImOnlineId： <code>pub type AuthorityId = app_sr25519::Public;</code><br>AuthorityDiscoveryId：pub type AuthorityId = app::Public; app_crypto!(sr25519, AUTHORITY_DISCOVERY);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   [</span><br><span class="line">    &quot;5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY&quot;,&#x2F;&#x2F;用于控制节点手续费账户 sr25519</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;grandpa&quot;: &quot;5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TTpu&quot;, &#x2F;&#x2F;ed25519</span><br><span class="line">        &quot;babe&quot;: &quot;5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY&quot;, &#x2F;&#x2F;sr25519</span><br><span class="line">        &quot;im_online&quot;: &quot;5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY&quot;,&#x2F;&#x2F;sr25519</span><br><span class="line">        &quot;authority_discovery&quot;: &quot;5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY&quot;&#x2F;&#x2F;sr25519</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>在json文件中配置的key,在运行的时候，需要指定key的类型，类型定义如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Key type for Babe module, build-in.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> BABE: KeyTypeId = KeyTypeId(*<span class="string">b"babe"</span>);</span><br><span class="line"><span class="comment">/// Key type for Grandpa module, build-in.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> GRANDPA: KeyTypeId = KeyTypeId(*<span class="string">b"gran"</span>);</span><br><span class="line"><span class="comment">/// Key type for controlling an account in a Substrate runtime, built-in.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> ACCOUNT: KeyTypeId = KeyTypeId(*<span class="string">b"acco"</span>);</span><br><span class="line"><span class="comment">/// Key type for Aura module, built-in.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> AURA: KeyTypeId = KeyTypeId(*<span class="string">b"aura"</span>);</span><br><span class="line"><span class="comment">/// Key type for ImOnline module, built-in.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> IM_ONLINE: KeyTypeId = KeyTypeId(*<span class="string">b"imon"</span>);</span><br><span class="line"><span class="comment">/// Key type for AuthorityDiscovery module, built-in.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> AUTHORITY_DISCOVERY: KeyTypeId = KeyTypeId(*<span class="string">b"audi"</span>);</span><br><span class="line"><span class="comment">/// A key type ID useful for tests.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">const</span> DUMMY: KeyTypeId = KeyTypeId(*<span class="string">b"dumy"</span>);</span><br></pre></td></tr></table></figure><p>./substrate export-blocks –base-path /home/jeremy/work/chain-data/node1 –chain ./customSpecRaw_node.json  /home/jeremy/work/chain-data/backup</p><p>./substrate export-blocks –base-path /home/jeremy/work/chain-data/node1 –chain /home/jeremy/work/temp/substrate/target/release/customSpecRaw_node.json –to 1950</p><p>5G6PuXb39m5jZjnKae5a1BnYpKSmvmQfkRFHADGuapR6hLwe</p><h2 id="存储使用遇到的问题"><a href="#存储使用遇到的问题" class="headerlink" title="存储使用遇到的问题"></a>存储使用遇到的问题</h2><p>在针对map进行操作时，若需要更改一个map的值，可以通过先获取最新的值，修改后再insert 进map; 还有一种方法是直接使用mutate方法，这种方式,但是在实际测试中发现不能将最新的值进行更新；若是不使用<code>checked_sub</code>这种方式，测试发现存在溢出现象;</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &lt;Balances&lt;T&gt;&gt;::mutate(id,&amp;from,|from_balance| &#123;</span><br><span class="line"><span class="keyword">let</span> new_balance = *from_balance.checked_sub(&amp;value);</span><br><span class="line"><span class="keyword">if</span> new_balance.is_none()&#123;</span><br><span class="line">  DispatchError::Other(<span class="string">"underflow in calculating allowance"</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> new_balance.unwrap();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="模块编写遇到的问题"><a href="#模块编写遇到的问题" class="headerlink" title="模块编写遇到的问题"></a>模块编写遇到的问题</h2><p>当前模块编写中，针对moudle中,验证失败原因 抛出更详细的错误提示；需要进一步查看相关解决方法；</p>]]></content>
      
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
